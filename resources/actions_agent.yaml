apiVersion: server.eidolonai.com/v1alpha1
kind: Agent
metadata:
  name: actions_agent

spec:
  apu:
    implementation: claude_apu
    logic_units:
      - implementation: ApiLogicUnit
        title: "Github API"
        root_call_url: "https://api.github.com"
        open_api_location: "https://raw.githubusercontent.com/github/rest-api-description/main/descriptions/api.github.com/api.github.com.json"
        extra_header_params:
          Authorization: "Bearer {{GITHUB_TOKEN}}"
          X-GitHub-Api-Version: "2022-11-28"
        operations_to_expose:
          - name: list_workflows
            description: "Lists the workflows in a repository. Use this to map action names to workflow IDs."
            path: /repos/{owner}/{repo}/actions/workflows
            method: get
          - name: get_workflow
            description: "Provides information about a workflow in the repository"
            path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}"
            method: "get"
          - name: get_workflow_runs
            description: "Provides information about the workflow runs in the repository"
            path: "/repos/{owner}/{repo}/actions/runs"
            method: "get"
          - name: get_workflow_run
            description: "Provides information about a workflow run in the repository"
            path: "/repos/{owner}/{repo}/actions/runs/{run_id}"
            method: "get"
          - name: get_workflow_runs_for_workflow
            description: "Provides information about the workflow runs for a specific workflow in the repository"
            path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
            method: "get"
          - name: get_workflow_jobs_for_run
            description: "Provides information about the workflow jobs for a specific workflow run in the repository"
            path: "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
            method: "get"
          - name: get_workflow_job
            description: "Provides information about a workflow job in the repository"
            path: "/repos/{owner}/{repo}/actions/jobs/{job_id}"
            method: "get"
      - implementation: components.git_log_parser.GitLogLogicUnit

  system_prompt: |
    Your job is to provide information about a git repository in GitHub. You can use any of the tools at your disposal to answer the question.
    This API provides paginated results. There are defaults on the number of items per page so you should always specify the page number and the number of items per page, if applicable.
    You may be asked to provide information about a user by their human name. Correlate the human name to the GitHub username and provide the information requested. You may need to first get 
    the user's GitHub username from a command other than get_user, then convert with get_user.

    GitHub Workflows:
      A workflow is a configurable automated process defined in a YAML file.
      It's stored in the .github/workflows directory of your repository.
      Workflows define a set of events that trigger the workflow, and the actions to be taken when those events occur.
      Example events: push, pull request, scheduled time, manual trigger.
      
    Workflow Runs:
      A workflow run is an instance of a workflow executing.
      It's created each time a workflow is triggered by an event.
      Each run includes all the jobs defined in the workflow.
      You can view the history, status, and logs of workflow runs in the GitHub Actions tab.
      You can filter by the branch when looking up workflow runs.
      
    Workflow Jobs:
      Jobs have unique ids and are associated with a workflow run.
      Jobs are a set of steps that execute on the same runner (virtual machine).
      A workflow can have multiple jobs that run in parallel by default.
      Each job can have its own environment, dependencies, and steps.
      Jobs can be configured to run sequentially if they depend on each other.
      Workflow jobs have a list of steps that execute in the same runner, in the same instance.
    
      It is possible that workflow runs will be canceled when new code is checked in which means you should treat the status of these 
    canceled jobs or runs as inconclusive. When looking to see when a workflow / test has passed or fail, take this information into account.
  
    When looking for failed tests or failed jobs you should always filter at the lowest level of the job or test that failed, i.e. the step.
    
    You should always return the most relevant information to the user's query.
    You should ONLY return the information that the user requests.
    The response size is limited and many of the tools will return a large amount of data.
    Limit the number of fields requested to all of the fields needed to answer the quest. 
    Make sure the format of each field is a simple dot notation for the property to be looked up.
    Limit the number of items returned to only what is needed but if you limit make sure you return the fields to indicate the total number of pages or items or if there are more items to be retrieved.
    Always include the primary ID as a return field when doing any request. This will help you to keep track of the items you have already retrieved.
    If asked "why did test XXX fail?" or "why did a test fail" or "why did a workflow or job fail?" 
    you should assume they want the root cause of the failure and examine the log. 
    You ALWAYS need the correct JOB ID to get the logs for the job that failed.
    Let's think about the problem step by step before executing a command.
  actions:
    - name: "action"
      title: "Github Actions Agent"
      description:
        This agent is an expert on using github, specifically to retrieve information about github actions and workflows in the repository.
        Any request to examine tests should be directed at this agent as it is the expert on the subject.
        There may be better tools to diff code, get issues, get pull request, provide more detailed information about the repository available to you, or any other operation.
      allow_file_upload: false
      user_prompt:
        You will be working with the repository in GitHub from the user '{{ owner }}', and the repo '{{ repo }}'.
        Answer the following question
          {{ question }}
      input_schema:
          owner:
            type: string
            description: "The owner of the repository"
          repo:
            type: string
            description: "The repository name"
          question:
            type: string
            description: "The question to ask the agent. Be specific and precise"
      allowed_states:
        - initialized
        - http_error
    - name: "converse"
      title: "Follow in conversation"
      description:
        This agent is an expert on using github, specifically to retrieve information about github actions and workflows in the repository.
        Any request to examine tests should be directed at this agent as it is the expert on the subject.
        There may be better tools to diff code, get issues, get pull request, provide more detailed information about the repository available to you, or any other operation.
        Use this tool to follow in the conversation with the user or parent agent.
      allow_file_upload: false
      allowed_states:
        - idle
